#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è AI Category Matcher Service
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
"""

import requests
import json
import time
from typing import Dict, Any, List

class AICategoryServiceTester:
    def __init__(self, base_url: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞
        
        Args:
            base_url: –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://your-domain.railway.app)
        """
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'AI-Category-Service-Tester/1.0'
        })
    
    def test_health(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        print("üè• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health...")
        
        try:
            response = self.session.get(f"{self.base_url}/health")
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üìä –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {data.get('model_loaded')}")
            print(f"üìà –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {data.get('base_loaded')}")
            
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"error": str(e)}
    
    def test_main_page(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã API"""
        print("\nüè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        
        try:
            response = self.session.get(self.base_url)
            response.raise_for_status()
            
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å: {data.get('service')}")
            print(f"üìã –í–µ—Ä—Å–∏—è: {data.get('version')}")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}")
            
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"error": str(e)}
    
    def test_debug(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /debug...")
        
        try:
            response = self.session.get(f"{self.base_url}/debug")
            response.raise_for_status()
            
            data = response.json()
            if data.get('status') == 'success':
                debug_info = data.get('data', {})
                print(f"ü§ñ –ú–æ–¥–µ–ª—å: {debug_info.get('model_info', {}).get('name')}")
                print(f"üìä –¢–æ–≤–∞—Ä–æ–≤: {debug_info.get('database_info', {}).get('total_products')}")
                print(f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {debug_info.get('database_info', {}).get('categories_count')}")
                print(f"üîë API –∫–ª—é—á: {'‚úÖ' if debug_info.get('api_info', {}).get('openrouter_key_set') else '‚ùå'}")
            
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"error": str(e)}
    
    def test_search(self, query: str, limit: int = 5) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞: '{query}'...")
        
        try:
            params = {'query': query, 'limit': limit}
            response = self.session.get(f"{self.base_url}/test_search", params=params)
            response.raise_for_status()
            
            data = response.json()
            if data.get('status') == 'success':
                results = data.get('data', {}).get('results', [])
                print(f"üìà –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}")
                
                for i, result in enumerate(results, 1):
                    print(f"  {i}. {result.get('name')} ({result.get('category')}) - {result.get('similarity'):.2f}")
            
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"error": str(e)}
    
    def test_categorization(self, name: str, code: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
        print(f"\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: '{name}'...")
        
        try:
            payload = {
                "name": name,
                "code": code
            }
            
            response = self.session.post(f"{self.base_url}/n8n_process", json=payload)
            response.raise_for_status()
            
            data = response.json()
            if data.get('status') == 'success':
                result = data.get('data', {})
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è')}")
                print(f"üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {result.get('–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è')}")
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')}%")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {data.get('message')}")
            
            return data
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {"error": str(e)}
    
    def test_batch_categorization(self, products: List[Dict[str, str]]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print(f"\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ ({len(products)} —Ç–æ–≤–∞—Ä–æ–≤)...")
        
        results = []
        for i, product in enumerate(products, 1):
            print(f"  –û–±—Ä–∞–±–æ—Ç–∫–∞ {i}/{len(products)}: {product['name']}")
            result = self.test_categorization(product['name'], product['code'])
            results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(products):
                time.sleep(0.5)
        
        return {"results": results}
    
    def run_full_test_suite(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤ AI Category Service")
        print("=" * 60)
        
        test_results = {}
        
        # 1. –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è
        test_results['health'] = self.test_health()
        
        # 2. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        test_results['main_page'] = self.test_main_page()
        
        # 3. –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        test_results['debug'] = self.test_debug()
        
        # 4. –¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞
        search_queries = [
            "–º–æ—Ç–æ–±–ª–æ–∫",
            "–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä",
            "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
            "–Ω–∞—Å–æ—Å"
        ]
        
        test_results['search'] = {}
        for query in search_queries:
            test_results['search'][query] = self.test_search(query, limit=3)
        
        # 5. –¢–µ—Å—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
        test_products = [
            {"name": "–ú–æ—Ç–æ–±–ª–æ–∫ –¥–∏–∑–µ–ª—å–Ω—ã–π 7 –ª.—Å.", "code": "534143"},
            {"name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–Ω–∑–∏–Ω–æ–≤—ã–π 2.5 –∫–í—Ç", "code": "123456"},
            {"name": "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 1.5 –∫–í—Ç", "code": "789012"},
            {"name": "–ü–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä SDS-plus 800 –í—Ç", "code": "345678"}
        ]
        
        test_results['categorization'] = self.test_batch_categorization(test_products)
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        return test_results
    
    def save_test_results(self, results: Dict[str, Any], filename: str = "test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    BASE_URL = "https://your-domain.railway.app"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
    
    print("ü§ñ AI Category Service - –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–µ—Ä–∞
    tester = AICategoryServiceTester(BASE_URL)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = tester.run_full_test_suite()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    tester.save_test_results(results)
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:")
    print(f"  üè• Health: {'‚úÖ' if results.get('health', {}).get('status') == 'healthy' else '‚ùå'}")
    print(f"  üè† Main Page: {'‚úÖ' if 'service' in results.get('main_page', {}) else '‚ùå'}")
    print(f"  üîç Debug: {'‚úÖ' if results.get('debug', {}).get('status') == 'success' else '‚ùå'}")
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–π
    categorization_results = results.get('categorization', {}).get('results', [])
    successful_categorizations = sum(
        1 for r in categorization_results 
        if r.get('status') == 'success'
    )
    print(f"  ü§ñ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {successful_categorizations}/{len(categorization_results)} ‚úÖ")


if __name__ == "__main__":
    main() 